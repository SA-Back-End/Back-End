generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user              Int              @id @default(autoincrement())
  firstName            String
  lastName             String
  username             String           @unique
  email                String           @unique
  description          String
  password             String
  isAdmin              Boolean          @default(false)
  birthDate            DateTime         @default(now())
  status               StatusUser
  studyarea            Json?
  profilePicture       Json?
  posts                Post[]           @relation("author")
  project              Project[]
  sticky               Screen_Stick[]
  formation            Formation[]
  certificate          Certificates[]
  //userProjects UserProject[]
  participation        Participation[]
  experience           Experience[]
  followers            Follows[]        @relation("follower")
  following            Follows[]        @relation("following")
  likes                Post[]
  User_Status          User_Status?     @relation(fields: [user_StatusId_status], references: [id_status])
  user_StatusId_status Int?
  User_StudyArea       User_StudyArea[]
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id_user])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id_user])
  followingId Int

  @@id([followerId, followingId])
}

model Formation {
  id_formation   Int         @id @default(autoincrement())
  degree         String
  studyArea      StudyArea[]
  beginDate      DateTime
  endDate        DateTime
  description    String
  institution_id Int
  institution    Institution @relation(fields: [institution_id], references: [id_institution])
  userId         Int
  id_user        User        @relation(fields: [userId], references: [id_user])
}

model Institution {
  id_institution    Int            @id @default(autoincrement())
  institution_name  String
  institutions_type String
  description       String
  formations        Formation[]
  certificates      Certificates[]
  experiences       Experience[]
}

model Experience {
  id_experience  Int         @id @default(autoincrement())
  office         String
  studyArea      StudyArea[]
  beginDate      DateTime
  endDate        DateTime
  institution_id Int
  institution    Institution @relation(fields: [institution_id], references: [id_institution])
  userId         Int
  user           User        @relation(fields: [userId], references: [id_user])
  role           String? // Ver oq Ã© ROLE
}

model Certificates {
  id_certificate   Int         @id @default(autoincrement())
  certificate_name String
  beginDate        DateTime
  endDate          DateTime
  id_institution   Int
  id_user          Int
  institutions     Institution @relation(fields: [id_institution], references: [id_institution])
  userId           User        @relation(fields: [id_user], references: [id_user])
  url              String
  // adiconar id studyArea
}

model Post {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation("author", fields: [userId], references: [id_user])
  text     String
  post_img Bytes  @db.ByteA
  likedBy  User[]
}

model Project {
  id            Int             @id @default(autoincrement())
  project_name  String          @unique
  description   String
  donate        String
  studyArea     StudyArea[]
  tags          HardSkills[]
  status        StatusProject
  id_userAdmin  Int
  userAdmin     User            @relation(fields: [id_userAdmin], references: [id_user])
  participation Participation[]
  sticky        Screen_Stick[]
  //projectUsers UserProject[]
}

// model UserProject {
//   id        Int     @id @default(autoincrement())
//   userId    Int
//   projectId Int
//   user      User    @relation(fields: [userId], references: [id_user])
//   project   Project @relation(fields: [projectId], references: [id])

//   @@unique([userId, projectId])
// }

model Participation {
  id_user_participating Int
  id_project            Int
  user                  User    @relation(fields: [id_user_participating], references: [id_user])
  project               Project @relation(fields: [id_project], references: [id])

  @@id([id_project, id_user_participating])
}

model Screen_Stick {
  id_stick       Int      @id @default(autoincrement())
  match_dateTime DateTime
  id_user        Int
  userId         User     @relation(fields: [id_user], references: [id_user])
  id_project     Int
  project        Project  @relation(fields: [id_project], references: [id])
}

model User_Status {
  id_status   Int    @id @default(autoincrement())
  status_name String
  User        User[]
}

model User_StudyArea {
  id_User_StudyArea Int         @id @default(autoincrement())
  studyArea         StudyArea[]
  user_id           Int
  user              User        @relation(fields: [user_id], references: [id_user])
}

enum HardSkills {
  JS
  TS
  Java
}

enum SoftSkills {
  comunicacao
  foco
}

enum StatusUser {
  available
  unavailable
}

enum StatusProject {
  terminado
  nao_iniciado
  avancado
}

enum StudyArea {
  programacao
  biologia
  quimica
}
