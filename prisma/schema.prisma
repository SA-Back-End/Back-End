generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user        Int           @id @default(autoincrement())
  firstName      String
  lastName       String
  username       String        @unique
  email          String        @unique
  description    String
  password       String
  isAdmin        Boolean       @default(false)
  birthDate      DateTime      @default(now())
  status         StatusUser
  studyarea      Json?
  profilePicture Json?
  posts          Post[]
  project        Project[]
  match          Match[]
  formation     Formation[]
  certificate   Certificates[]
  //userProjects UserProject[]

}

model Formation {
  id_formation  Int @id @default(autoincrement())
  degree        String
  studyArea     StudyArea[]
  beginDate     DateTime
  endDate       DateTime
  description   String
  institution_id Int
  institution   Institution @relation(fields: [institution_id], references: [id_institution])
  userId  Int
  id_user User  @relation(fields: [userId], references: [id_user])
}

model Institution {
  id_institution  Int   @id @default(autoincrement())
  institution_name String
  institutions_type String
  
}

model Experience {
  id_experience Int  @id @default(autoincrement())
  office          String
  studyArea     StudyArea[]
  beginDate     DateTime
  endDate       DateTime
  institution_id Int
  institution   Institution @relation(fields: [institution_id], references: [id_institution])
}

model Certificates {
  id_certificate  Int   @id @default(autoincrement())
  certificate_name  String
  beginDate   DateTime
  endDate     DateTime
  id_institution Int
  institutions  Institution @relation(fields: [id_institution], references: [id_institution])
  //archive
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  tag         String[]
  userId      Int
  user        User     @relation(fields: [userId], references: [id_user])
}

model Project {
  id           Int           @id @default(autoincrement())
  project_name String        @unique
  description  String
  donate       String
  studyArea    StudyArea[]
  tags         HardSkills[]
  status       StatusProject
  id_userAdmin Int
  userAdmin    User @relation(fields: [id_userAdmin], references: [id_user])
  //projectUsers UserProject[]
}

// model UserProject {
//   id        Int     @id @default(autoincrement())
//   userId    Int
//   projectId Int
//   user      User    @relation(fields: [userId], references: [id_user])
//   project   Project @relation(fields: [projectId], references: [id])

//   @@unique([userId, projectId])
// }

model Match {
  id_match  Int   @id @default(autoincrement())
  match_dateTime  DateTime
  id_user Int
  userId  User  @relation(fields: [id_user], references: [id_user])

}

enum HardSkills {
  JS
  TS
  Java
}

enum SoftSkills {
  comunicacao
  foco
}

enum StatusUser {
  disponivel
  indisponivel
}

enum StatusProject {
  terminado
  nao_iniciado
  avancado
}

enum StudyArea {
  programacao
  biologia
  quimica
}

enum Role {
  manager
  finance
}